description = 'The protoc plugin for gRPC Kotlin Coroutine'

File artifactStagingPath = "$buildDir/artifacts" as File
String arch = rootProject.hasProperty('targetArch') ? rootProject.targetArch : osdetector.arch
String os = rootProject.hasProperty('targetOs') ? rootProject.targetOs : osdetector.os

dependencies {
  testImplementation project(':grpc-kt-stub')
}

protobuf {
  generatedFilesBaseDir = "$projectDir/gen"
  protoc {
    if (project.hasProperty('protoc')) {
      path = project.protoc
    } else {
      artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
  }
  plugins {
    grpc {
      path = pluginPath
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.dependsOn 'buildPlugin'
      task.inputs.file pluginPath
    }
    ofSourceSet('test')*.plugins {
      grpc {
        // write CodeGeneratorRequest to request.bin, so it can be loaded for debug purpose
        // option 'write_input=true'
      }
    }
  }
}

String goArch(String arch) {
  switch(arch) {
    case "x86_64": return "amd64"
    case "x86_32": return "386"
    default: throw new RuntimeException("Unsupported arch " + arch)
  }
}

String goOs(String os) {
  switch(os) {
    case "osx": return "darwin"
    default: return os
  }
}

task buildPlugin() {
  doLast {
    exec {
      environment += [GOOS: goOs(os), GOARCH: goArch(arch)]
      commandLine 'go', 'build', '-o', pluginPath, 'src/main/go/main.go'
    }
  }
}

task buildArtifacts(type: Copy) {
  dependsOn 'buildPlugin'
  from("$buildDir/exe") {
    if (osdetector.os != 'windows') {
      rename 'protoc-gen-grpc-kt', '$0.exe'
    }
  }
  into artifactStagingPath
}

archivesBaseName = "$protocPluginBaseName"

artifacts {
  archives("$artifactStagingPath/${protocPluginBaseName}.exe" as File) {
    classifier os + "-" + arch
    type "exe"
    extension "exe"
    builtBy buildArtifacts
  }
}

// Exe files are skipped by Maven by default. Override it.
// Also skip jar files that is generated by the java plugin.
[
  install.repositories.mavenInstaller,
  uploadArchives.repositories.mavenDeployer,
]*.setFilter { artifact, file ->
  !(file.getName().endsWith('jar') || file.getName().endsWith('jar.asc'))
}

[
  install.repositories.mavenInstaller,
  uploadArchives.repositories.mavenDeployer,
]*.pom*.whenConfigured { pom ->
  pom.project {
    // This isn't any sort of Java archive artifact, and OSSRH doesn't enforce
    // javadoc for 'pom' packages. 'exe' would be a more appropriate packaging
    // value, but it isn't clear how that will be interpreted. In addition,
    // 'pom' is typically the value used when building an exe with Maven.
    packaging = "pom"
  }
}
