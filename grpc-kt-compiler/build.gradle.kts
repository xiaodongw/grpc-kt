import com.google.protobuf.gradle.ExecutableLocator
import com.google.protobuf.gradle.GenerateProtoTask
import com.google.protobuf.gradle.ProtobufConfigurator
import com.google.protobuf.gradle.ProtobufConvention
import build.*

plugins {
  id("com.google.protobuf")
}


description = "The protoc plugin for Kotlin"

//
//buildscript {
//  repositories {
//    mavenCentral()
//    mavenLocal()
//  }
//  dependencies {
//    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.5"
//  }
//}
//
val artifactStagingPath = File("$buildDir/artifacts")
val arch: String = if (hasProperty("targetArch")) properties["targetArch"].toString() else osdetector.arch
val os: String = if (hasProperty("targetOs")) properties["targetOs"].toString() else osdetector.os
//
dependencies {
  testCompile(project(":grpc-kt-stub"))
}

val genDir = "$projectDir/gen"
configure<ProtobufConvention> {
  protobuf(closureOf<ProtobufConfigurator> {
    generatedFilesBaseDir = genDir

    protoc(delegateClosureOf<ExecutableLocator> {
      artifact = "com.google.protobuf:protoc:${Constants.protobufVersion}"
    })

    plugins(delegateClosureOf<NamedDomainObjectContainer<ExecutableLocator>> {
      this {
        register("grpc") {
          //artifact = "com.github.xiaodongw:protoc-gen-grpc-kt:${version}"
          path = pluginPath()
        }
      }
    })

    generateProtoTasks(delegateClosureOf<ProtobufConfigurator.GenerateProtoTaskCollection> {
      all().forEach { task ->
        //task.dependsOn("buildPlugin")
        task.inputs.file(pluginPath())

        task.plugins(delegateClosureOf<NamedDomainObjectContainer<GenerateProtoTask.PluginOptions>> {
          this {
            register("grpc")
          }
        })
      }
    })
  })
}

configure<JavaPluginConvention> {
  sourceSets(closureOf<SourceSetContainer> {
    getByName("test").java.srcDir("${genDir}/test/java")
    getByName("test").java.srcDir("${genDir}/test/grpc")
  })
}

tasks.named("compileKotlin").configure {
  dependsOn("generateProto")
}

fun goArch(arch: String): String {
  return when(arch) {
    "x86_64" -> "amd64"
    "x86_32" -> "386"
    else -> throw RuntimeException("Unsupported arch " + arch)
  }
}

fun goOs(os: String): String {
  return when(os) {
    "osx" -> "darwin"
    else -> os
  }
}

tasks.create("buildPlugin") {
  doLast {
    exec {
      environment["GOOS"] = goOs(os)
      environment["GOARCH"] = goArch(arch)
      commandLine = listOf("go", "build", "-o", pluginPath(), "src/main/go/main.go")
    }
  }
}

tasks.create("buildArtifacts", Copy::class) {
  dependsOn("buildPlugin")
  from("$buildDir/exe") {
    if (osdetector.os != "windows") {
      rename("protoc-gen-grpc-kt", "$0.exe")
    }
  }
  into(artifactStagingPath)
}

project.base.archivesBaseName = Constants.protocPluginBaseName

artifacts {
  add("archives", file("$artifactStagingPath/${Constants.protocPluginBaseName}.exe")) {
    classifier = "$os-$arch"
    type = "exe"
    extension = "exe"
    builtBy(tasks.named("buildArtifacts"))
  }
}

// Exe files are skipped by Maven by default. Override it.
// Also skip jar files that is generated by the java plugin.
tasks.withType<Upload> {
  repositories {
    withConvention(MavenRepositoryHandlerConvention::class) {
      val publishFilter = PublishFilter { artifact, file ->
        !(file.getName().endsWith("jar") || file.getName().endsWith("jar.asc"))
      }
      mavenDeployer {
        // fixme filter not working?
        filter = publishFilter

        pom.project {
          withGroovyBuilder {
            "packaging"("pom")
          }
        }
      }

      mavenInstaller {
        // fixme filer not working?
        // fixme install not working?
        filter = publishFilter

        pom.project {
          withGroovyBuilder {
            // This isn't any sort of Java archive artifact, and OSSRH doesn't enforce
            // javadoc for 'pom' packages. 'exe' would be a more appropriate packaging
            // value, but it isn't clear how that will be interpreted. In addition,
            // 'pom' is typically the value used when building an exe with Maven.
            "packaging"("pom")
          }
        }
      }
    }
  }
}