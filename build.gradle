buildscript {
  ext.kotlinVersion = '1.3.0'

  repositories {
    mavenCentral()
    maven { url = 'https://dl.bintray.com/kotlin/kotlin-eap' }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version '1.3.0'
  id "com.google.osdetector" version "1.4.0"
  id "com.google.protobuf" version "0.8.6"
  id "com.github.ben-manes.versions" version "0.17.0"
}

ext {
  def exeSuffix = osdetector.os == 'windows' ? ".exe" : ""
  protocPluginBaseName = 'protoc-gen-grpc-kt'
  pluginPath = "$rootDir/grpc-kt-compiler/build/exe/$protocPluginBaseName$exeSuffix"

  grpcJavaVersion = '1.15.1'
  protobufVersion = '3.5.1'
  coroutineVersion = '1.0.0'
  junitVersion = '5.1.0'
}

allprojects {
  //apply plugin: "java"
  apply plugin: 'kotlin'
  apply plugin: 'com.google.protobuf'
  apply plugin: "maven"
  apply plugin: "signing"

  group = "com.github.xiaodongw"
  version = "0.2.0"

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url = 'https://dl.bintray.com/kotlin/kotlin-eap' }
  }

  sourceSets {
    test {
      kotlin {
        srcDir "gen/test/java"
        srcDir "gen/test/grpc"
      }
    }
  }
  
  compileKotlin {
    kotlinOptions.freeCompilerArgs = ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
  }
  
  compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
  }
  
  signing {
    required false
    sign configurations.archives
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  uploadArchives.repositories.mavenDeployer {
    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    String stagingUrl
    if (rootProject.hasProperty('repositoryId')) {
      stagingUrl = 'https://oss.sonatype.org/service/local/staging/deployByRepositoryId/' +
          rootProject.repositoryId
    } else {
      stagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    }
    def configureAuth = {
      if (rootProject.hasProperty('ossrhUsername') && rootProject.hasProperty('ossrhPassword')) {
        authentication(userName: rootProject.ossrhUsername, password: rootProject.ossrhPassword)
      }
    }
    repository(url: stagingUrl, configureAuth)
    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/', configureAuth)

    pom.project {
      name "grpc-kt"
      description 'GRPC stub & compiler for Kotlin Coroutine'
      url 'https://github.com/xiaodongw/grpc-kt'

      scm {
        url 'https://github.com/xiaodongw/grpc-kt.git'
      }

      licenses {
        license {
          name 'The Apache License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
      }

      developers {
        developer {
          id 'xiaodongw'
          name 'Xiaodong Wang'
          email 'xiaodongw79@gmail.com'
        }
      }
    }
  }

  test {
    testLogging {
      exceptionFormat = 'full'
      showExceptions true
      showCauses true
      showStackTraces true
    }
    maxHeapSize = '1500m'
  }
}
